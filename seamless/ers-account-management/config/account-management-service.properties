# Properties for account-management-system


############### Properties for module account-management #################
server.port=8092
logging.config=file:/opt/seamless/conf/account-management-service/log4j2.properties
# True if stored procedures should be used
#
useProcedures=false

# If set to true, all transactions are logged in the database.
# If set to false, transactions will only be logged for accounts without balance
# tracking (account.balance is NULL).
#
alwaysLogTransactions=true

# Default currency is used when activating accounts
#
locale.default_currency=EUR
locale.custom_currency.CFA=2

#################################################################################

ers_loan_account_type=LOANACCOUNT
accountmanagement.date.format=yyyy-MM-dd HH:mm:ss

cxf.path=/accountsystem

# This property will be used to check account type exists or not
apply_check_accountypeid=true
# set the language of the message file
defaultLanguage=en

#################################################################################

# Database connection settings for ersinstall
accountmanagement.database.name=AccountSystemDB
accountmanagement.database.sdb_pool_implementation=HCP
accountmanagement.database.db_driver=org.mariadb.jdbc.Driver
accountmanagement.database.db_url=jdbc:mariadb://10.10.0.115:3306/accountmanagement?autoReconnect=true&failoverreadonly=false&maxReconnects=100
accountmanagement.database.db_user=refill
accountmanagement.database.db_password=refill

#################################################################################

# spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.jdbcUrl = jdbc:mariadb://10.10.0.115:3306/accountmanagement?autoReconnect=true&failoverreadonly=false&maxReconnects=100
spring.datasource.username = refill
spring.datasource.password = refill
spring.datasource.testOnBorrow = true
spring.datasource.testWhileIdle = true
spring.datasource.timeBetweenEvictionRunsMillis = 60000
spring.datasource.minEvictableIdleTimeMillis = 30000
spring.datasource.validationQuery = SELECT 1
spring.datasource.max-active = 15
spring.datasource.max-idle = 10
spring.datasource.max-wait = 8000
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

#################################################################################
### JPA SQL AND ENTITY TO TABLE GENERATION CONFIGS
######
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

#################################################################################
flowcontrol.default.asynchronous=false
flowcontrol.default.cooldown_time=100
flowcontrol.default.max_parallel_requests=250
#################################################################################

# Supported account types by this account system

# For each account type the following settings are possible:
#
# allow_negative_balance_corrections - If true corrections might result in
#                                      negative balance even if he account
#                                      doesn't have any credit limit.
# autocreate                         - If true, this type of account will
#                                      if it doesn't exist and a request
#                                      refers to it.
# autocreate_on_deposit              - If true, a deposit will automatically
#                                      create an account of this type if it
#                                      doesn't exist.
# default_currency                   - Default currency for this type of
#                                      account, must be set if any of the
#                                      autocreate settings are set to true.
#									   If null will fallback to locale.default_currency
# password_length                    - If set to a non-zero value, passwords
#                                      are required for this account type.
#                                      When autocreating accounts,
#                                      a random numeric password will then
#                                      be created.
# password_encryption                - If passwords are enabled this has
#                                      to be set and specifies how the
#                                      passwords will be stored.
#                                     'PL' - Password stored as plain text
#                                     'MD' - Password stored as MD5 hash
#                                     'SH' - Password stored as SHA1 hash
# autogenerate_counter_length        - When autogenerating accounts,
#                                      this represents the length of the
#                                      counter part of the account id.
# autogenerate_prefix                - When autogenerating accounts,
#                                      add this prefix before the counter
#                                      part to form the account id.
# restricted_to_currency             - Only allow accounts with this currency
#
# allow_autocreate                   - If set to true, any deposit/query to
#                                      an account will automatically create it
#                                      (if the account id is valid)
#                                      For this to work with
#                                      getAccountInformation, default_currency
#                                      Must be set
#
# account_id_validation_regexp       - If set, all account ids will be
#                                      validated against this regexp
#
#
# apply_check_password				 - If set true, account ids will validated
#									   using account password
#

account_types.LOANACCOUNT.desctiption=Loan Account
account_types.LOANACCOUNT.autocreate=false
account_types.LOANACCOUNT.allow_autocreate=false
account_types.LOANACCOUNT.default_currency=USD


account_types.default.allow_negative_balance_corrections=false

# The default graceful shutdown time for stopping the server in milliseconds.
# In case a shutdown takes longer time, a warning message will be printed in the log.
servicemanager.shutdown_hooks=SIGHUP:timeout=60000

# If an update request (debit/credit) collides with another request
# updating the same account, this is the number of times the request
# should be retried before failing
stale_object_retries=5

# To update a specific account asynchronously on
# account system. This is because on production it is observed a specific
# account is updated every time there is a transaction made, e.g. Operator a/c
# of type Bookkeeping; more info can be found on TS-2999 The main idea here is
# instead of updating account on every request; put a resultant update on
# regular intervals

#enableAsynchronousAccountUpdate=false
#enableAsynchronousAccountUpdate.accountTypeId=BOOKKEEPING
#enableAsynchronousAccountUpdate.accountId=OPERATOR
#eachTransactionLoggerThreadPoolSize=10

ws.endpoint.threadpool.max.queuesize = 256
ws.endpoint.threadpool.initial.threads = 5
ws.endpoint.threadpool.high.watermark = 25
ws.endpoint.threadpool.low.watermark = 5
ws.endpoint.threadpool.dequeue.timeout.millis = 120000
ws.endpoint.threadpool.name = VoucherFactoryCXFThreadPool


## For database R/W Split
## By default hash_modulus_connection_enable=false will be true and read_write_connection_enable=false
## If we want to split database traffic then set hash_modulus_connection_enable=false and read_write_connection_enable=true
## Only one properties between hash_modulus_connection_enable and read_write_connection_enable to be set true not both

#hash_modulus_connection_enable=false
#read_write_connection_enable=true


#Book Keeping cron job - When this cron is triggered book keeping accounts will be updated in accounts table(Till then the balance will be in memory)
bookKeepingCronJobSchedule= 0 0 0 * * *

#-------------------------------------------------------------------------------------
#Configure Reseller Loan Contract as per ResellerType
#-------------------------------------------------------------------------------------
ams.contract.resellerLoanContract.distributor.penaltyHour=10
ams.contract.resellerLoanContract.distributor.penaltyPercentage=3
ams.contract.resellerLoanContract.distributor.fixedAmountEnabled=false
ams.contract.resellerLoanContract.distributor.fixedPenaltyAmount=30

ams.contract.resellerLoanContract.subDistributor.penaltyHour=8
ams.contract.resellerLoanContract.subDistributor.penaltyPercentage=2
ams.contract.resellerLoanContract.subDistributor.fixedAmountEnabled=false
ams.contract.resellerLoanContract.subDistributor.fixedPenaltyAmount=40

ams.contract.resellerLoanContract.default.penaltyHour=1
ams.contract.resellerLoanContract.default.penaltyPercentage=10
ams.contract.resellerLoanContract.default.fixedAmountEnabled=true
ams.contract.resellerLoanContract.default.fixedPenaltyAmount=50
#-------------------------------------------------------------------------------------

# Header information for AMS
ams.http.response.headers=authorization,system-token

# Enable DataFeeder
log4j.additivity.com.seamless.common.data.dump.DataFeeder=true
#-------------------------------------------------------------------------------------
#Data feed version
#-------------------------------------------------------------------------------------
dataFeed.version=1
dataFeed.componentName=ams
#-------------------------------------------------------------------------------------
#Configuration for executor service
#-------------------------------------------------------------------------------------
threadpoolmanager.pools.dataFeed.targetId=com.seamless.common.data.dump.dataFeed
threadpoolmanager.pools.dataFeed.corePoolSize=25
threadpoolmanager.pools.dataFeed.maxPoolSize=40
threadpoolmanager.pools.dataFeed.keepAliveTime=60000
threadpoolmanager.pools.dataFeed.keepAliveTimeUnit=MILLISECONDS
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
# Data Feed templates
#-------------------------------------------------------------------------------------
template.ADD_ACCOUNTS=amsFeed_account.ftl
template.UPDATE_ACCOUNTS=amsFeed_account.ftl
template.MAKE_ACCOUNT_TRANSACTION=amsFeed_accountTransaction.ftl
template.MAKE_ACCOUNTS_TRANSACTIONS=amsFeed_accountsTransaction.ftl
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
#Configure freemarker
#-------------------------------------------------------------------------------------
dataFeed.freemarker.file.path=/opt/seamless/conf/account-management-service/templates
#-------------------------------------------------------------------------------------

dms.server=http://ers-dealer-management-system-service.ers-prod.svc.cluster.local:8033
dms.basePath=/dms/v1/resellers
dms.fetchResellerEndPoint=/resellerData
#-------------------------------------------------------------------------------------
#Configure DMS API Path
#-------------------------------------------------------------------------------------
#dealermanagement.api.details.resellerData.baseUrl=http://ers-dealer-management-system-service.ers-prod.svc.cluster.local:8033/
#dealermanagement.api.details.resellerData.apiPath=dms/v1/resellers/?/resellerData
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
#Configure IDMS API Path
#-------------------------------------------------------------------------------------
account.management.system.idmsApi.baseUrl=http://nginx-service.ers-prod.svc.cluster.local:18080
account.management.system.idmsApi.apiUri.loginUri=/login-backend
account.management.system.idmsApi.apiUri.loginChannel=SEAMLESS-UNIFIED
account.management.system.idmsApi.apiUri.loginUserId=OPERATOR
account.management.system.idmsApi.apiUri.loginPassword=2021
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
messages.source.files.path=/opt/seamless/conf/account-management-service
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
### Event Management System Configuration
#-------------------------------------------------------------------------------------
ams.service.emsApi.baseUrl=http://ers-notification-manager-service.ers-prod.svc.cluster.local:8277
ams.service.emsApi.registerUri=/register
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
### THREADING CONFIGURATION
# TaskExecutor Configurations For Asynchronous Execution of Importer Scheduler
# This executor is specifically being used for Import opertaioN (SP-TRANSFER etc in future)
#
# Recommendations:
# For optimum operation please set `core_pool_size` equals to the number of cores in the server.
# @param corePoolSize the number of threads to keep in the pool, even
#        if they are idle, unless {@code allowCoreThreadTimeOut} is set
# @param maximumPoolSize the maximum number of threads to allow in the
#        pool
# @param keepAliveTime when the number of threads is greater than
#        the core, this is the maximum time that excess idle threads
#        will wait for new tasks before terminating.
# @param unit the time unit for the {@code keepAliveTime} argument
# @param workQueue the queue to use for holding tasks before they are
#        executed.  This queue will hold only the {@code Runnable}
#        tasks submitted by the {@code execute} method.
#######
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
# This job will get all non processed deffered transactions
# Will consolidate all deferred by each account(accountId and accounttypeid)
deferred.job-schedule.cron=*/10 * * * * *
deferred_commission_key=DEFERRED_DATE
########################
# As for now TXE is not sending system-token for deferred transaction so if its null then below token will be used
# otherwise coming token will be used
# configured this token because AMS will be calling its makeAccountTransaction from scheduler
# which will be used for the process of deferred commission transactions its internal call (AMS->AMS)
########################
ams.system-token={"ersReference":"20211022102152378010000003086","startTime":1634898112,"rootComponent":"ams","context":{"client":{"channel":"SEAMLESS-UNIFIED"},"initiator":{"uid":"OPERATOR","typ":"RESELLERUSERNAME","rtp":"OPERATOR","resellerPath":"operator"}}}
### Below authorization being used for deferred transaction make accountCall
### if it will be empty then login call to nging will be hit to get authorization
ams.authorization=auth1234
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
ams.executor.corePoolSize=5
ams.executor.maxPoolSize=1000
ams.executor.keepAliveTime=30000
ams.executor.waitForTaskToComplete=true
#-------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------
ers.connections.transaction_processing.url=http://ers-txe-service.ers-prod.svc.cluster.local:8777/txe/transactionProcessing
ers.connections.transaction_processing.user=smsapp
ers.connections.transaction_processing.password=smsapp
ers.connections.transaction_processing.receive_timeout=0
ers.connections.transaction_processing.allow_chunking=false
ers.connections.transaction_processing.connection_timeout=0


#-#-#-#-#-#-#-#-# PERFORMANCE PARAMETERS #-#-#-#-#-#-#-#-#
accountmanagement.database.pool_max_size=60
accountmanagement.database.pool_min_size=20
accountmanagement.database.pool_timeout=20
ams.accounts.resellerAccountToSkip.CASH_BOOKKEEPING=BOOKKEEPING
ams.accounts.resellerAccountToSkip.COMMISSION_BOOKKEEPING=BOOKKEEPING
#Disable operator for realtime timestamp updating
#ams.accounts.resellerAccountToSkip.operator=RESELLER
ams.accounts.resellerAccountToSkip.BONUS=BOOKKEEPING
ams.accounts.resellerAccountToSkip.CASH=BOOKKEEPING
ams.accounts.resellerAccountToSkip.CASH_ADJUSTMENT=BOOKKEEPING
ams.accounts.resellerAccountToSkip.COMMISSION=BOOKKEEPING
ams.accounts.resellerAccountToSkip.FEES=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_PPB=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_PROMOPPB=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_PROMORC=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_PVAS=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_RC=BOOKKEEPING
ams.accounts.resellerAccountToSkip.OPERATOR_XRC=BOOKKEEPING
ams.accounts.resellerAccountToSkip.TAX=BOOKKEEPING
ams.accounts.resellerAccountToSkip.TDS=BOOKKEEPING
spring.datasource.hikari.maximum-pool-size=120
spring.datasource.hikari.minimum-idle=30
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=50
#-#-#-#-#-#-#-#-# PERFORMANCE PARAMETERS #-#-#-#-#-#-#-#-#
data_feed_actions=makeaccounttransaction

spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

##Added for Create Reseller Product
ams.add_account_without_select=true
