package com.seamless.customer.bi.aggregator.aggregate

import com.seamless.customer.bi.aggregator.aggregate.AbstractAggregator
import com.seamless.customer.bi.aggregator.model.ReportIndex
import com.seamless.customer.bi.aggregator.util.DateUtil
import groovy.text.GStringTemplateEngine
import groovy.util.logging.Log4j
import org.elasticsearch.action.search.SearchRequest
import org.elasticsearch.action.search.SearchResponse
import org.elasticsearch.index.query.BoolQueryBuilder
import org.elasticsearch.index.query.QueryBuilders
import org.elasticsearch.rest.RestStatus
import org.elasticsearch.search.aggregations.Aggregation
import org.elasticsearch.search.aggregations.AggregationBuilders
import org.elasticsearch.search.aggregations.Aggregations
import org.elasticsearch.search.aggregations.ParsedMultiBucketAggregation
import org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregationBuilder
import org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceBuilder
import org.elasticsearch.search.aggregations.bucket.composite.ParsedComposite
import org.elasticsearch.search.aggregations.bucket.composite.TermsValuesSourceBuilder
import org.elasticsearch.search.aggregations.metrics.ParsedSum
import org.elasticsearch.search.builder.SearchSourceBuilder
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.web.client.RestTemplate
import java.text.SimpleDateFormat
import org.elasticsearch.client.RestHighLevelClient
import org.springframework.util.MultiValueMap
import java.util.concurrent.ConcurrentHashMap
import org.springframework.scheduling.annotation.Scheduled

import java.util.stream.Collectors

@Log4j
public class RegionWiseSmsReport extends AbstractAggregator
{

    @Value('${RegionWiseSmsReport.notificationUrl:http://localhost:8277}')
    String notificationManagerUrl;

    @Autowired
    RestHighLevelClient client

    @Autowired
    protected JdbcTemplate jdbcTemplate;

    @Override
    @Scheduled(cron = '${RegionWiseSmsReport.cron:*/3 * * * * ?}')
    void aggregate() {
        log.info("region wise sms report started***************************************************************************" + new Date());
        List<ReportIndex> indices = DateUtil.getIndex();
        for (ReportIndex index : indices) {
            log.info(index.toString())
            aggregateDataES(index.getIndexName(), index.getStartDate(), index.getEndDate());
        }
    }

    private void aggregateDataES(String index, String fromDate, String toDate) {
        HttpHeaders headers = new HttpHeaders()
        SearchRequest searchRequest = new SearchRequest(index);
        SearchSourceBuilder searchSourceBuilder = fetchInput("C2C")
        searchRequest.source(searchSourceBuilder)
        List<AreaWiseModel> c2cResponseModels = generateResponse(searchRequest)
        searchSourceBuilder = fetchInput("C2S")
        searchRequest.source(searchSourceBuilder)
        List<AreaWiseModel> c2sResponseModels = generateResponse(searchRequest)
        List<RegionDetailsModel> regionDetails = fetchRegionDetails()
        List<RegionWiseReportModel> responseModels = generateFinalResponse(c2cResponseModels,c2sResponseModels,regionDetails)
        sendNotification(headers, regionDetails, responseModels)
    }

    private static SearchSourceBuilder fetchInput(String transactionType) {
        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();

        List<CompositeValuesSourceBuilder<?>> sources = new ArrayList<>();
        sources.add(new TermsValuesSourceBuilder("areaCode").field("SENDER_FIELD_areaCode.keyword").missingBucket(true));
        sources.add(new TermsValuesSourceBuilder("regionCode").field("SENDER_FIELD_regionCode.keyword").missingBucket(true));

        CompositeAggregationBuilder compositeBuilder = new CompositeAggregationBuilder("AreaWise",
                sources).size(10000);

        compositeBuilder.subAggregation(AggregationBuilders.sum("totalAmountValue").field("transactionAmount"))

        BoolQueryBuilder queryBuilder

        if(transactionType == "C2C")
        {
            queryBuilder = QueryBuilders.boolQuery()
                    .must(QueryBuilders.wildcardQuery("productSKU.keyword","C2C*"))
                    .filter(QueryBuilders.termsQuery("SenderResellerType.keyword","SE"))
                    .filter(QueryBuilders.termsQuery("ReceiverResellerType.keyword","RET"))
                    .filter(QueryBuilders.termsQuery("resultCode", 0))
        }
        else
        {
            queryBuilder = QueryBuilders.boolQuery()
                    .must(QueryBuilders.wildcardQuery("transactionProfile.keyword","C2S*"))
                    .filter(QueryBuilders.termsQuery("resultCode", 0))
        }

        queryBuilder =  queryBuilder.filter(QueryBuilders.rangeQuery("timestamp").gte("now/d").lt("now+6h/d")
                        .includeLower(true).includeUpper(true))

        searchSourceBuilder.query(queryBuilder);
        searchSourceBuilder.aggregation(compositeBuilder).size(10000);
        return searchSourceBuilder;
    }

    private List<AreaWiseModel> generateResponse(SearchRequest searchRequest) {
        List<AreaWiseModel> areaWiseModels = new ArrayList<>();
        SearchResponse searchResponse = null;
        try {
            searchResponse = client.search(searchRequest, COMMON_OPTIONS);
        } catch (Exception e) {
            log.error("Error mapping rule " + searchRequest + "\nError message : " + e);
        }

        log.debug("*******Request:::: " + searchRequest.toString())
        RestStatus status = searchResponse.status();
        log.debug("response status -------------" + status);

        if (status == RestStatus.OK) {
            Aggregations aggregations = searchResponse.getAggregations();
            ParsedComposite parsedComposite = aggregations.asMap().get("AreaWise");


            for (ParsedMultiBucketAggregation.ParsedBucket bucket : parsedComposite.getBuckets()) {
                LinkedHashMap<String, String> keyValuesMap = bucket.getKey();
                Map<String, Aggregation> aggregationMap = bucket.getAggregations().asMap();
                Aggregation totalAmountAggregration = aggregationMap.get("totalAmountValue");
                ParsedSum p = (ParsedSum) totalAmountAggregration;
                // Date dateTimeDay = DateFormatter.formatDate(keyValuesMap.get("EndTimeDay"));
                AreaWiseModel areaWiseModel = new AreaWiseModel(keyValuesMap.get("regionCode"),keyValuesMap.get("areaCode"),p.value())
                areaWiseModels.add(areaWiseModel)
            }
        }
        return areaWiseModels;
    }

    private List<RegionDetailsModel> fetchRegionDetails()
    {
        String query = "select a.geo_code as regionName, b.`manager_name` as managerName, b.`email` as email, b.`msisdn` as msisdn from geo_manager_mapping a, geo_manager b where a.geo_manager_id=b.id and manager_type=\"REGION\";"

        List<RegionDetailsModel> regionDetailsModelList = new ArrayList<>()

        def result = jdbcTemplate.queryForList(query)
        for (Map<String,Object> row : result)
        {
            RegionDetailsModel regionDetails = new RegionDetailsModel(
                    row.get("regionName") as String,
                    row.get("managerName") as String,
                    row.get("email") as String,
                    row.get("msisdn") as String,
            )

            regionDetailsModelList.add(regionDetails)
        }
        return regionDetailsModelList
    }

    private static List<RegionWiseReportModel> generateFinalResponse(List<AreaWiseModel> c2cResponseModels,
                                                                     List<AreaWiseModel>c2sResponseModels,
                                                                     List<RegionDetailsModel> regionDetails){
        List<String> regions = new ArrayList<>()
        List<RegionWiseReportModel> regionWiseSmsReportModels = new ArrayList<>()

        regionDetails.forEach({ region ->
            regions.add(region.getRegion())
        })
        regions.forEach({ region ->
            List<AreaWiseModel> c2cByRegion = c2cResponseModels.stream().filter(
                    { c2c -> (c2c.getRegion() == region) }).collect(Collectors.toList())

            double totalC2c = 0;
            c2cByRegion.stream().forEach({ c2c -> totalC2c = totalC2c + c2c.getAmount() })

            List<AreaWiseModel> c2sByRegion = c2sResponseModels.stream().filter(
                    { c2s -> (c2s.getRegion() == region) }).collect(Collectors.toList())

            double totalC2s = 0;
            c2sByRegion.stream().forEach({ c2s -> totalC2s = totalC2s + c2s.getAmount() })

            RegionWiseReportModel regionWiseSmsReportModel = new RegionWiseReportModel(
                    region,totalC2c,totalC2s,c2cByRegion,c2sByRegion)

            regionWiseSmsReportModels.add(regionWiseSmsReportModel)
        })

        return regionWiseSmsReportModels
    }

    private void sendNotification(HttpHeaders headers,
                                         List<RegionDetailsModel> regionDetails,
                                         List<RegionWiseReportModel> responseModels)
    {
        log.info("region wise sms sending begins ***************")

        RestTemplate restTemplate = new RestTemplate()

        regionDetails.forEach({ regionRecord ->
            log.info("sending message for region: " + regionRecord.getRegion())
            RegionWiseReportModel data = responseModels.stream().filter({ model ->
                model.getRegionName() ==  regionRecord.getRegion()}).findFirst().get()

            if(data!=null) {
                HttpEntity<MultiValueMap<String, String>> request = prepareSmsNotificationRequestBody(data, regionRecord)
                try {
                    String returnStatus = restTemplate.postForObject(notificationManagerUrl, request,String.class);
                    log.info("SMS sent status" + returnStatus);
                }catch(Exception e){
                    log.error(e)
                }

                log.info("Sending email ***************")

                Map<String, Object> fields = new ConcurrentHashMap();
                fields.put("notificationType", "EMAIL");
                fields.put("recipientId", regionRecord.getEmail());
                fields.put("senderId", "se.vms@seamless.se");
                fields.put("message", readEmailMessage(data));
                fields.put("referenceEventId", "eventId");
                Map<String, Object> emailProps = new HashMap<>();
                fields.put("EMAILPROPS", emailProps);
                Map req = new HashMap();
                req.put("eventTag","ADHOC_ALERT");
                req.put("fields",fields);
                def requestEmail = new HttpEntity<>(req, headers);
                try {
                    String returnStatus = restTemplate.postForObject(notificationManagerUrl, requestEmail,  String.class)
                    log.info("Email sent status" + returnStatus);
                }catch(Exception e){
                    log.error(e);
                }
            }
        })
        log.info("region wise notification sending ended ***************")
    }

    static def prepareSmsNotificationRequestBody(RegionWiseReportModel data, RegionDetailsModel record){

        Map<String, Object> fields = new ConcurrentHashMap();
        fields.put("notificationType","SMS");
        fields.put("recipientId", record.getMsisdn());
        fields.put("message", readReminderSmsBody(data));
        fields.put("senderid","9988776655");
        fields.put("referenceEventId","eventId");

        Map req = new HashMap();
        req.put("eventTag","ADHOC_ALERT");
        req.put("fields",fields);

        //log.info("Request Data: " + new JsonBuilder(req).toPrettyString());
        HttpHeaders headers = new HttpHeaders();
        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(req, headers);
        return request;
    }

    static def readReminderSmsBody(RegionWiseReportModel data){
        def f = new File('/opt/seamless/conf/bi-aggregator/scripts/region_wise_sms_report.ftl')
        def engine = new GStringTemplateEngine()
        def binding = [data : data ]
        def template = engine.createTemplate(f).make(binding)
        return template.toString()
    }

    static def readEmailMessage(RegionWiseReportModel regionModel){
        File f = new File('/opt/seamless/conf/bi-aggregator/scripts/region_wise_sms_report.ftl')
        def engine = new GStringTemplateEngine()
        def binding = [data : regionModel ]
        def template = engine.createTemplate(f).make(binding)
        return template.toString()
    }
}

class AreaWiseModel
{
    private  String region;
    private String area;
    private double amount;

    AreaWiseModel(String region, String area, double amount) {
        this.region = region
        this.area = area
        this.amount = amount
    }

    String getRegion() {
        return region
    }

    void setRegion(String region) {
        this.region = region
    }

    String getArea() {
        return area
    }

    void setArea(String area) {
        this.area = area
    }

    double getAmount() {
        return amount
    }

    void setAmount(double amount) {
        this.amount = amount
    }
}

class RegionWiseReportModel
{
    private String regionName;
    private double totalC2cAmount;
    private double totalC2sAmount;
    private List<AreaWiseModel> c2cAreaWise;
    private List<AreaWiseModel> c2sAreaWise;
    private String date

    RegionWiseReportModel(String regionName, double totalC2cAmount, double totalC2sAmount, List<AreaWiseModel> c2cAreaWise,
                          List<AreaWiseModel> c2sAreaWise) {
        this.regionName = regionName
        this.totalC2cAmount = totalC2cAmount
        this.totalC2sAmount = totalC2sAmount
        this.c2cAreaWise = c2cAreaWise
        this.c2sAreaWise = c2sAreaWise
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        this.date = formatter.format(date);
    }

    String getRegionName() {
        return regionName
    }

    void setRegionName(String regionName) {
        this.regionName = regionName
    }

    double getTotalC2cAmount() {
        return totalC2cAmount
    }

    void setTotalC2cAmount(double totalC2cAmount) {
        this.totalC2cAmount = totalC2cAmount
    }

    double getTotalC2sAmount() {
        return totalC2sAmount
    }

    void setTotalC2sAmount(double totalC2sAmount) {
        this.totalC2sAmount = totalC2sAmount
    }

    List<AreaWiseModel> getC2cAreaWise() {
        return c2cAreaWise
    }

    void setC2cAreaWise(List<AreaWiseModel> c2cAreaWise) {
        this.c2cAreaWise = c2cAreaWise
    }

    List<AreaWiseModel> getC2sAreaWise() {
        return c2sAreaWise
    }

    void setC2sAreaWise(List<AreaWiseModel> c2sAreaWise) {
        this.c2sAreaWise = c2sAreaWise
    }

}

class RegionDetailsModel
{
    String region
    String managerName
    String email
    String msisdn

    RegionDetailsModel(String region, String managerName, String email, String msisdn) {
        this.region = region
        this.managerName = managerName
        this.email = email
        this.msisdn = msisdn
    }

    String getRegion() {
        return region
    }

    void setRegion(String region) {
        this.region = region
    }

    String getManagerName() {
        return managerName
    }

    void setManagerName(String managerName) {
        this.managerName = managerName
    }

    String getEmail() {
        return email
    }

    void setEmail(String email) {
        this.email = email
    }

    String getMsisdn() {
        return msisdn
    }

    void setMsisdn(String msisdn) {
        this.msisdn = msisdn
    }
}

