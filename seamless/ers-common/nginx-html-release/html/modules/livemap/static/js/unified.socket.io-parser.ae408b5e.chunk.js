(self.webpackChunk_unified_livemap=self.webpackChunk_unified_livemap||[]).push([[7142],{2870:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Decoder:()=>A,Encoder:()=>N,PacketType:()=>d,protocol:()=>y});var n=r(6452);const o="function"==typeof ArrayBuffer,s=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),c="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);function a(t){return o&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||i&&t instanceof Blob||c&&t instanceof File}function f(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,r=t.length;e<r;e++)if(f(t[e]))return!0;return!1}if(a(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return f(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&f(t[e]))return!0;return!1}function u(t){const e=[],r=t.data,n=t;return n.data=h(r,e),n.attachments=e.length,{packet:n,buffers:e}}function h(t,e){if(!t)return t;if(a(t)){const r={_placeholder:!0,num:e.length};return e.push(t),r}if(Array.isArray(t)){const r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=h(t[n],e);return r}if("object"==typeof t&&!(t instanceof Date)){const r={};for(const n in t)t.hasOwnProperty(n)&&(r[n]=h(t[n],e));return r}return t}function l(t,e){return t.data=p(t.data,e),t.attachments=void 0,t}function p(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let r=0;r<t.length;r++)t[r]=p(t[r],e);else if("object"==typeof t)for(const r in t)t.hasOwnProperty(r)&&(t[r]=p(t[r],e));return t}const y=5;var d;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(d||(d={}));class N{encode(t){return t.type!==d.EVENT&&t.type!==d.ACK||!f(t)?[this.encodeAsString(t)]:(t.type=t.type===d.EVENT?d.BINARY_EVENT:d.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==d.BINARY_EVENT&&t.type!==d.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),e}encodeAsBinary(t){const e=u(t),r=this.encodeAsString(e.packet),n=e.buffers;return n.unshift(r),n}}class A extends n.Q{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===d.BINARY_EVENT||e.type===d.BINARY_ACK?(this.reconstructor=new E(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const r={type:Number(t.charAt(0))};if(void 0===d[r.type])throw new Error("unknown packet type "+r.type);if(r.type===d.BINARY_EVENT||r.type===d.BINARY_ACK){const n=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const o=t.substring(n,e);if(o!=Number(o)||"-"!==t.charAt(e))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===t.charAt(e+1)){const n=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);r.nsp=t.substring(n,e)}else r.nsp="/";const n=t.charAt(e+1);if(""!==n&&Number(n)==n){const n=e+1;for(;++e;){const r=t.charAt(e);if(null==r||Number(r)!=r){--e;break}if(e===t.length)break}r.id=Number(t.substring(n,e+1))}if(t.charAt(++e)){const n=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!A.isPayloadValid(r.type,n))throw new Error("invalid payload");r.data=n}return r}static isPayloadValid(t,e){switch(t){case d.CONNECT:return"object"==typeof e;case d.DISCONNECT:return void 0===e;case d.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case d.EVENT:case d.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case d.ACK:case d.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class E{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=l(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}}}]);