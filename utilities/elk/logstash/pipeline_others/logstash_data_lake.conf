
input {
  beats {
    port => 9032
  }
}

filter
{
if [fields][logtype] == "auditlog"{
        json
        {
            source => "message"
        }
        if "_jsonparsefailure" not in [tags]
        {
                 mutate {
                       convert => { "rootComponent" => "boolean" }
                  #      add_field => {"ersReference" => "transactionNumber"}
                 }
                 if  ![ersReference]{
                     mutate {
                         add_field => {"ersReference" => "%{transactionNumber}"}
                     }
                 }
                date
                {
                         match => ["timestamp","yyyy-MM-dd HH:mm:ss"]
                         timezone => "UTC"
                         target => "timestamp"
                }
                if ([rootComponent])
                {
                    ruby
                    {
                        code => "
                        require 'date'
                        week_n = event.get('timestamp').time.strftime '%V'
                        month_n = event.get('timestamp').time.strftime '%m'
                        year_n = event.get('timestamp').time.strftime '%Y'
                        if(week_n == '01' && month_n == '12')
                        year_n = (year_n.to_i + 1)
                        week_num = year_n.to_s + 'w' + week_n.to_s
                        else if (month_n == '01' && week_n.to_i > 50)
                        year_n = (year_n.to_i - 1)
                        week_num = year_n.to_s + 'w' + week_n.to_s
                        else
                        week_num = year_n.to_s + 'w' + week_n.to_s
                        end
                        end
                        event.set('[@metadata][week_num]', week_num)
                        "
                    }
                    prune
                    {
                         blacklist_names => ["^log$","^tags$","^agent$","^message$","^path$","^@version$","^host$","^ecs$","^input$","^cloud$","^event$"]
                    }
                }
                else {
                   prune {
                 whitelist_names => ["^timestamp$","%{componentName}","transactionNumber", "eventName", "lastUpdatedTimestamp", "resultCode","ersReference","eventType"]
                   interpolate => true
                  }
                    ruby {
                      code => "
                        require 'date'
                      week_n = event.get('timestamp').time.strftime '%V'
                      month_n = event.get('timestamp').time.strftime '%m'
                      year_n = event.get('timestamp').time.strftime '%Y'
                      if(week_n == '01' && month_n == '12')
                        year_n = (year_n.to_i + 1)
                        week_num = year_n.to_s + 'w' + week_n.to_s
                      else
                        week_num = year_n + 'w' + week_n
                      end
                      event.set('[@metadata][week_num]', week_num)
                          "
                   }
                 }
        }
        else
        {
                ruby
                {
                    code => "
                    puts 'Transaction skipped due to invalid JSON format'
                    require 'date'
                    week_n = event.get('@timestamp').time.strftime '%V'
                    month_n = event.get('@timestamp').time.strftime '%m'
                    year_n = event.get('@timestamp').time.strftime '%Y'
                    if(week_n == '01' && month_n == '12')
                    year_n = (year_n.to_i + 1)
                    week_num = year_n.to_s + 'w' + week_n.to_s
                    else if (month_n == '01' && week_n.to_i > 50)
                    year_n = (year_n.to_i - 1)
                    week_num = year_n.to_s + 'w' + week_n.to_s
                    else
                    week_num = year_n + 'w' + week_n
                    end
                    end
                    event.set('[@metadata][week_num]', week_num)
                    "
                }

        }

}
}
output
{
if [fields][logtype] == "auditlog"{
        if "_jsonparsefailure" in [tags]
        {
            elasticsearch {
            action => "index"
            hosts => [ "https://10.10.4.193:9200"]
            index => "skipped_txn_%{[@metadata][week_num]}"
            cacert => "/usr/share/logstash/custom/certs/ca.crt"
            user => "elastic"
            password => "Seamless@123"

            }
        }
        else
        {
                if([eventType] in "audit" or [eventName] in "Login" )
                {
                   if  ![transactionNumber]
                   {
                        elasticsearch
                        {
                            action => "update"
                            hosts => [ "https://10.10.4.193:9200"]
                            index => "audit_%{[@metadata][week_num]}"
                            document_id => "%{ersReference}"
                            doc_as_upsert => true
                            cacert => "/usr/share/logstash/custom/certs/ca.crt"
                            user => "elastic"
                            password => "Seamless@123"

                        }
                   }
                   else
                   {
                        elasticsearch
                        {
                        action => "update"
                        hosts => [ "https://10.10.4.193:9200"]
                        index => "audit_%{[@metadata][week_num]}"
                        document_id => "%{transactionNumber}"
                        doc_as_upsert => true
                        cacert => "/usr/share/logstash/custom/certs/ca.crt"
                        user => "elastic"
                        password => "Seamless@123"

                        }
                   }
               }
               else
               {
                    elasticsearch
                    {
                        action => "update"
                        hosts => [ "https://10.10.4.193:9200"]
                        index => "data_lake_%{[@metadata][week_num]}"
                        document_id => "%{transactionNumber}"
                        doc_as_upsert => true
                        cacert => "/usr/share/logstash/custom/certs/ca.crt"
                        user => "elastic"
                        password => "Seamless@123"
                    }
               }

        }
stdout { codec => rubydebug}
}
}
