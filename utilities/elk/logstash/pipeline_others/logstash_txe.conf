input {
  beats {
    port => 9030
  }
}


filter {
  #grok filter to fetch data from specific format
if [fields][logtype] == "transactionlog"{
  grok {
     #match => { "message" => "{(?<txndata>(?<=\{)(.*?)(?=\}+$))}"}
      match => { "message" => "{(?<txndata>(?<=\{)(ErsReference=.*?)(?=\}+$))}"}
  }

   if "_grokparsefailure" in [tags]
  {
    drop { }
  }

  kv {
        source => "txndata"
        field_split => "|"
        value_split => "="
  }

  mutate {
      convert => {"SENDER_COMMISSION_MARGIN_VALUE" => "float"}
      convert => {"RECEIVER_COMMISSION_MARGIN_VALUE" =>  "float"}
      convert => {"COMMISSION_MARGIN_VALUE" =>  "float" }
  }
  mutate{
         add_field => ["configApplied", "Yes" ]
  }

  ruby {
      init => '
              Columns = [ "ReceiverResellerId","batchId" ]
              Cols = [ "ReferredTransactionErsReference","ClientReference" ]
              Colstoformat = [ "SENDER_","RECEIVER_" ]
              ColForResult = ["ResultStatus" ]
            '
      code => '
              Columns.each { |k|
                  unless event.get(k)
                      event.set(k, "NA")
                  end

               }
               ColForResult.each{ |k|
                    if event.get(k)=="SUCCESS"
                           event.set("errorStatus", "")
                    else
                           event.set("errorStatus", event.get(k))
                    end
               }
              Cols.each { |k|
                  if event.get(k)=="null"
                      event.set(k, "")
                  end
              }

             Colstoformat.each { |k|
                 type = k+"COMMISSION_MARGIN_TYPE"
                 value =k+"COMMISSION_MARGIN_VALUE"
                 if event.get(type) != nil || event.get(value) != nil
                  if event.get(type)=="Absolute" || event.get(type)=="Percentage"
                      event.set(value, event.get(value).to_f/100)
                  end
                 end
              }
          '
  }
#-----------------------------------For P2P TDR -------------------------------------------------#


  if("P2P" in [TRANSACTION_PROFILE]){
          mutate{
                 add_field => ["SENDER_TAX1_VALUE", "0"]
                 add_field => ["SENDER_ACCESS_FEE", "0"]
                 add_field => ["RECEIVER_ACCESS_FEE", "0"]
                 add_field => ["RECEIVER_BONUS_VALUE", "0"]
                 add_field => ["RECEIVER_BONUS_VALADITY", "0"]

          }
     }
     if([transactionProps]) {
           kv {
               source => "transactionProps"
               value_split => "="
           }
       }
  #Convert float data types
  mutate {
          convert => {"ReceiverBalanceValueBefore" => "float"}
          convert => {"ReceiverBalanceValueAfter" =>  "float"}
          convert => {"SenderBalanceValueBefore" =>  "float" }
          convert => {"SenderBalanceValueAfter" =>  "float" }
          convert => {"ReceiverBonusAmount" => "float"}
          convert => {"TransactionAmount" =>  "float" }
          convert => {"ReceiverCommission" =>  "float" }
          convert => {"SenderCommission" =>  "float" }
  }


  if(![awaitingCustomerApproval] and [ResultStatus] and [ResultStatus]=="SUCCESS" and [operation] and [operation]!="REQUEST_REVERSAL" ) {
           mutate{
               add_field => ["isTransactionReversible", "true" ]
           }
  }

   ruby {
                 code => '
                        geoPath=""
                        geoCode=event.get("RECEIVER_FIELD_regionCode")
                        if !geoCode.nil?
                            geoPath=geoCode
                        end

                        extractedAreaCode=event.get("RECEIVER_FIELD_areaCode")
                        if !extractedAreaCode.nil?
                            geoPath=geoPath + "/" + extractedAreaCode
                            geoCode=extractedAreaCode
                        end

                        extractedTerritoryCode=event.get("RECEIVER_FIELD_territoryCode")
                        if !extractedTerritoryCode.nil?
                            geoPath=geoPath + "/" + extractedTerritoryCode
                            geoCode=extractedTerritoryCode
                        end

                        extractedThanaCode=event.get("RECEIVER_FIELD_thanaCode")
                        if !extractedThanaCode.nil?
                            geoPath=geoPath + "/" + extractedThanaCode
                            geoCode=extractedThanaCode
                        end

                        if  (geoCode!=nil && geoCode!="")
                            geoPathArray = geoPath.split("/")
                            if geoPathArray.length() >= 2
                                event.set("RECEIVER_FIELD_parentGeoCode", geoPathArray[geoPathArray.length()-2])
                            else
                                event.set("RECEIVER_FIELD_parentGeoCode","NA")
                            end
                            event.set("RECEIVER_FIELD_geoCode",geoCode)
                        else
                            event.set("RECEIVER_FIELD_geoCode","NA")
                            event.set("RECEIVER_FIELD_parentGeoCode","NA")
                        end
                        if (geoPath!=nil && geoPath!="")
                            event.set("RECEIVER_FIELD_geoPath",geoPath)
                        else
                            event.set("RECEIVER_FIELD_geoPath","NA")
                        end

                        geoPath=""
                        geoCode=""
                        geoCode=event.get("SENDER_FIELD_regionCode")
                        if !geoCode.nil?
                            geoPath=geoCode
                        end

                        extractedAreaCode=event.get("SENDER_FIELD_areaCode")
                        if !extractedAreaCode.nil?
                            geoPath=geoPath + "/" + extractedAreaCode
                            geoCode=extractedAreaCode
                        end

                        extractedTerritoryCode=event.get("SENDER_FIELD_territoryCode")
                        if !extractedTerritoryCode.nil?
                            geoPath=geoPath + "/" + extractedTerritoryCode
                            geoCode=extractedTerritoryCode
                        end

                        extractedThanaCode=event.get("SENDER_FIELD_thanaCode")
                        if !extractedThanaCode.nil?
                            geoPath=geoPath + "/" + extractedThanaCode
                            geoCode=extractedThanaCode
                        end

                        if  (geoCode!=nil && geoCode!="")
                            event.set("SENDER_FIELD_geoCode",geoCode)
                            geoPathArray = geoPath.split("/")
                            if geoPathArray.length() >= 2
                               event.set("SENDER_FIELD_parentGeoCode", geoPathArray[geoPathArray.length()-2])
                           else
                               event.set("SENDER_FIELD_parentGeoCode","NA")
                           end
                        else
                            event.set("SENDER_FIELD_geoCode","NA")
                            event.set("SENDER_FIELD_parentGeoCode","NA")
                        end
                        if (geoPath!=nil && geoPath!="")
                            event.set("SENDER_FIELD_geoPath",geoPath)
                        else
                            event.set("SENDER_FIELD_geoPath","NA")
                        end
                 '
   }

  if(![RECEIVER_FIELD_areaCode]){
    mutate{
         add_field => ["RECEIVER_FIELD_areaCode", "NA" ]
    }
  }

  if(![RECEIVER_FIELD_territoryCode]){
    mutate{
         add_field => ["RECEIVER_FIELD_territoryCode", "NA" ]
    }
  }

  if(![RECEIVER_FIELD_thanaCode]){
    mutate{
           add_field => ["RECEIVER_FIELD_thanaCode", "NA" ]
    }
  }


  if(![SENDER_FIELD_areaCode]){
    mutate{
        add_field => ["SENDER_FIELD_areaCode", "NA" ]
    }
  }

  if(![SENDER_FIELD_territoryCode]){
    mutate{
         add_field => ["SENDER_FIELD_territoryCode", "NA" ]
    }
  }

  if(![SENDER_FIELD_thanaCode]){
    mutate{
        add_field => ["SENDER_FIELD_thanaCode", "NA" ]
    }
  }



  if(![RECEIVER_FIELD_areaName]){
    mutate{
        add_field => ["RECEIVER_FIELD_areaName", "NA" ]
    }
  }

  if(![RECEIVER_FIELD_regionName]){
    mutate{
      add_field => ["RECEIVER_FIELD_regionName", "NA" ]
    }
  }

  if(![RECEIVER_FIELD_thanaName]){
    mutate{
        add_field => ["RECEIVER_FIELD_thanaName", "NA" ]
    }
  }

  if(![SENDER_FIELD_thanaName]){
    mutate{
        add_field => ["SENDER_FIELD_thanaName", "NA" ]
    }
  }

  if(([batchId] and [batchId]!= "NA") or ([TransactionProfile] and [TransactionProfile]=="AUTO_CREDIT_TRANSFER") ){
          mutate {
          add_field => ["transactionMode", "Auto(A)" ]
      }
    }else {
          mutate {
          add_field => ["transactionMode", "Manual(M)" ]
      }
    }

  if(![REQUEST_GATEWAY_TYPE]){
      mutate {
          add_field => ["REQUEST_GATEWAY_TYPE", "%{Channel}" ]
      }
  }

  if([RECEIVER_COMMISSION]) {
      mutate{
          split => ["RECEIVER_COMMISSION" , " "]
          add_field => ["RECEIVER_COMMISSION_AMOUNT", "%{[RECEIVER_COMMISSION][0]}" ]
          add_field => ["RECEIVER_COMMISSION_CURRENCY", "%{[RECEIVER_COMMISSION][1]}" ]
          add_field => ["RECEIVER_COMMISSION_VALUE", "%{[RECEIVER_COMMISSION][0]} %{[RECEIVER_COMMISSION][1]}"]
      }
  }else {
      mutate {
          add_field => ["RECEIVER_COMMISSION_AMOUNT", "0" ]
          add_field => ["RECEIVER_COMMISSION_CURRENCY", "BDT" ]
          add_field => ["RECEIVER_COMMISSION_VALUE", "0 BDT"]
      }
  }

  if([UPLIFT_COMMISSION]) {
        mutate{
            split => ["UPLIFT_COMMISSION" , " "]
            add_field => ["UPLIFT_COMMISSION_AMOUNT", "%{[UPLIFT_COMMISSION][0]}" ]
            add_field => ["UPLIFT_COMMISSION_CURRENCY", "%{[UPLIFT_COMMISSION][1]}" ]
            add_field => ["UPLIFT_COMMISSION_VALUE", "%{[UPLIFT_COMMISSION][0]} %{[UPLIFT_COMMISSION][1]}"]
        }
  }else {
        mutate {
            add_field => ["UPLIFT_COMMISSION_AMOUNT", "0" ]
            add_field => ["UPLIFT_COMMISSION_CURRENCY", "BDT" ]
            add_field => ["UPLIFT_COMMISSION_VALUE", "0 BDT"]
        }
  }


  if([TRANSACTION_FEE]) {
      mutate{
          split => ["TRANSACTION_FEE" , " "]
          add_field => ["TRANSACTION_FEE_AMOUNT", "%{[TRANSACTION_FEE][0]}" ]
          add_field => ["TRANSACTION_FEE_CURRENCY", "%{[TRANSACTION_FEE][1]}" ]
          add_field => ["TRANSACTION_FEE_VALUE", "%{[TRANSACTION_FEE][0]} %{[TRANSACTION_FEE][1]}"]
      }
  }else {
      mutate {
          add_field => ["TRANSACTION_FEE_AMOUNT", "0" ]
          add_field => ["TRANSACTION_FEE_CURRENCY", "BDT" ]
          add_field => ["TRANSACTION_FEE_VALUE", "0 BDT"]
      }
  }

  mutate {
      rename => { "EndTime" => "timestamp" }
      rename => { "ResultCode" => "resultCode"}
      rename => {"ErsReference"=>"ersReference"}
      rename => {"SenderResellerId"=>"senderResellerId"}
      rename => {"SenderMSISDN"=>"senderMSISDN"}
      rename => {"ReceiverResellerId"=>"receiverResellerId"}
      rename => {"ReceiverMSISDN"=>"receiverMSISDN"}
      rename => {"TransactionProfile"=>"transactionProfile"}
      rename => {"ProductSKU"=>"productSKU"}
      rename => {"TransactionAmount"=>"transactionAmount"}
      rename => {"ResultStatus"=>"resultMessage"}

  }

  mutate {
      convert => {"RECEIVER_COMMISSION_AMOUNT" => "float"}
      convert => {"transactionAmount" => "float"}
      convert => {"UPLIFT_COMMISSION_AMOUNT" => "float"}
      convert => {"TRANSACTION_FEE_AMOUNT" => "float"}
      replace => { "rootComponent" => "true" }
  }


    # Convert date data types.
    # set EndTime for filtering.
  date {
      match => ["timestamp", "ISO8601"]
      timezone => "UTC"
      target => "timestamp"
  }
  date {
        match => ["StartTime", "ISO8601"]
        timezone => "UTC"
        target => "StartTime"
    }

  date {
      match => ["startTime", "UNIX"]
      timezone => "UTC"
      target => "startTime"
  }
  date {
           match => ["supervisionExpiryDateAfter", "ISO8601","yyyy-MM-dd HH:mm:ss"]
           timezone => "UTC"
           target => "supervisionExpiryDateAfter"
   }
  if [UPLOADED_AT]{
    date {
        match => ["UPLOADED_AT", "yyyy-MM-dd HH:mm:ss"]
        timezone => "UTC"
        target => "UPLOADED_AT"
    }
  }

  if [extTxnDate]{
    date {
          match => ["extTxnDate", "dd/MM/yyyy","dd-MM-yyyy"]
          timezone => "UTC"
          target => "extTxnDate"
      }
    }
  if [paymentInstrumentDate]{
    date {
          match => ["paymentInstrumentDate", "dd/MM/yyyy","yyyy-MM-dd"]
          timezone => "UTC"
          target => "paymentInstrumentDate"
      }
    }

  if "_dateparsefailure" in [tags] {
      date {
          match => ["startTime", "yyyy-MM-dd HH:mm:ss.SSS"]
          timezone => "UTC"
          target => "startTime"
      }

      ruby {
          code => "
           event.set('startTime', event.get('startTime').to_i)
          "
      }
  }

    mutate {
              add_field => ["seamlessResultStatus", "%{resultCode}" ]
    }

  if([NativeResultCode] == "9001"){
         mutate {
                   add_field => ["resultStatus", "250" ]
               }
    }
  else if([resultCode] == "0"){
          mutate {
          add_field => ["resultStatus", "200" ]
      }
  }

  else if([resultCode] == "4"){
      mutate {
          add_field => ["resultStatus", "205" ]
      }
  }
  else {
          mutate {
              add_field => ["resultStatus", "206" ]
          }
  }
  ruby {
        code => 'event.set("startTime", event.get("startTime").to_i*1000)'
  }
  ruby {
        code => 'event.set("UPLIFT_COMMISSION", event.get("UPLIFT_COMMISSION_VALUE"))'
  }
  ruby {
        code => 'event.set("RECEIVER_PAYABLE_AMOUNT", event.get("transactionAmount").to_f + event.get("TRANSACTION_FEE_AMOUNT").to_f - event.get("RECEIVER_COMMISSION_AMOUNT").to_f - event.get("UPLIFT_COMMISSION_AMOUNT").to_f)'
  }

#--------------------------For C2S TDR-------------------------------------------------------------
 if("C2S" in [TRANSACTION_PROFILE]){
            mutate{
                  add_field => ["receiverExternalCode", "NULL"]
                  add_field => ["toUserId", "NULL"]
                  add_field => ["receiverCategory", "NULL"]
                  add_field => ["receiverBonus", "0"]
                  add_field => ["receiverBonusValidity", "0"]
           }
           if[RECEIVER_SUBSCRIBER_ACCOUNT_CLASS_ID]
           {
                mutate{
                      convert => ["RECEIVER_SUBSCRIBER_ACCOUNT_CLASS_ID", "integer"]
                }
                if([RECEIVER_SUBSCRIBER_ACCOUNT_CLASS_ID] < 1000)
                {
                    mutate{
                        add_field => ["subscriberType", "PRE"]
                    }
                }
                else
                {
                     mutate{
                         add_field => ["subscriberType", "POST"]
                     }
                }
           }
           if([channel]=="WEB")
           {

                 mutate {
                          add_field => {"productCategory" => "%{serviceType}"}
                 }
           }
           mutate
           {
                 replace => ["ReceiverBalanceValueBefore",""]
                 replace => ["ReceiverBalanceValueAfter",""]
           }

         ruby {
               code => '
                        dref=event.get("COMMISSION")
                        if !dref.nil?
                            rpath=dref.split(" ")
                            event.set("COMMISSION_AMOUNT",rpath[0])
                            if event.get("COMMISSION_AMOUNT") == "0"
                                  event.set("differentialApplicable", "N")
                                  event.set("differentialGiven", "N")
                            else
                                  event.set("differentialApplicable", "Y")
                                  event.set("differentialGiven", "Y")
                            end
                        end
                        '
         }

 }
#----------------------------------------------------------------------------------------------------
        ruby{
             code => '
            # event["timestamp"] = event["timestamp"].strftime("%Y%m%d %H:%M:%S.%L")
                         dref=event.get("RECEIVER_RESELLER_PATH")
                         if !dref.nil?
                               rpath = dref.split("/")
                               event.set("receiver_ownerId", rpath[1])
                               if rpath.length() >= 2
                                event.set("receiver_parentId", rpath[rpath.length()-2])
                               else
                                event.set("receiver_parentId", "")
                               end
                         end
                         dref=event.get("RECEIVER_FIELD_regionPath")
                         if !dref.nil?
                               rpath = dref.split("/")
                               event.set("receiver_ownerRegion", rpath[1])
                         end
                         dref=event.get("SENDER_RESELLER_PATH")
                         if !dref.nil?
                              rpath = dref.split("/")
                              event.set("sender_ownerId", rpath[1])
                              if rpath.length() >= 2
                                event.set("sender_parentId", rpath[rpath.length()-2])
                              else
                                event.set("sender_parentId", "")
                              end
                         end
                         dref=event.get("SENDER_FIELD_regionPath")
                         if !dref.nil?
                              rpath = dref.split("/")
                              event.set("sender_ownerRegion", rpath[1])
                         end
                '
        }

 # Remove below fields
  prune
  {
      blacklist_names => ["^log$","^tags$","^agent$","^message$","^path$","^@version$","^host$","^ecs$","^input$","^cloud$","^txndata$","^event$","880"]
  }

  if([operation] and ([operation]=="APPROVE" or [operation]=="CANCEL" or([operation]=="REQUEST_REVERSAL" and [resultMessage] and [resultMessage]=="SUCCESS" )) and [ReferredTransactionErsReference] and [ReferredTransactionErsReference] != "") {
   elasticsearch {
                  hosts => [ "https://10.10.4.193:9200"]
                  query => "_id:%{ReferredTransactionErsReference}"
                  index => "data_lake"
                  fields => { "timestamp" => "referredTransactionTime" }
                  ca_file => "/usr/share/logstash/custom/certs/ca.crt"
                  ssl => true
                  user => "elastic"
                  password => "Seamless@123"
                  
              }


     #generating index name of referred transaction

  date {
        match => ["referredTransactionTime", "ISO8601"]
        timezone => "UTC"
        target => "referredTransactionTime"
    }


  ruby {
        code => "
            require 'date'
            t = event.get('referredTransactionTime').time - 21600
            week_n = t.strftime '%V'
            month_n = t.strftime '%m'
            year_n = t.strftime '%Y'
            if(week_n == '01' && month_n == '12')
              year_n = (year_n.to_i + 1)
              week_num = year_n.to_s + 'w' + week_n.to_s
            else if (month_n == '01' && week_n.to_i > 50)
              year_n = (year_n.to_i - 1)
              week_num = year_n.to_s + 'w' + week_n.to_s
            else
              week_num = year_n + 'w' + week_n
            end
            end
            event.set('[@metadata][week_num_referred]', week_num)
            event.set('rubyRefferredTimeValue', t.strftime('%d/%m/%Y %k:%M:%S'))
            event.set('ruby_refferredtime_index', week_num)
        "
     }

  }

  #Generate week number
  ruby {
      code => "
          require 'date'
          t = event.get('timestamp').time - 21600
          week_n = t.strftime '%V'
          month_n = t.strftime '%m'
          year_n = t.strftime '%Y'
          if(week_n == '01' && month_n == '12')
            year_n = (year_n.to_i + 1)
            week_num = year_n.to_s + 'w' + week_n.to_s
          else if (month_n == '01' && week_n.to_i > 50)
            year_n = (year_n.to_i - 1)
            week_num = year_n.to_s + 'w' + week_n.to_s
          else
            week_num = year_n + 'w' + week_n
          end
          end
          event.set('[@metadata][week_num]', week_num)
          event.set('rubyTimestampValue', t.strftime('%d/%m/%Y %k:%M:%S'))
          event.set('ruby_timestamp_index', week_num)

          dref=event.get('RECEIVER_RESELLER_PATH')
                if !dref.nil?
                  rpath = dref.split('/')
                  event.set('ownerId', rpath[1])
                end


          dref=event.get('RECEIVER_FIELD_regionPath')
                if !dref.nil?
                  rpath = dref.split('/')
                  event.set('ownerRegion', rpath[1])
                end
      "
   }
}
}

output {
if [fields][logtype] == "transactionlog"{
            if([operation] and ([operation]=="APPROVE"or [operation]=="CANCEL") and [ReferredTransactionErsReference] and [ReferredTransactionErsReference] != "") {
                                 elasticsearch {
                                                hosts => [ "https://10.10.4.193:9200"]
                                                index => "data_lake_%{[@metadata][week_num_referred]}"
                                                document_id => "%{ReferredTransactionErsReference}"
                                                action => "update"
                                                doc_as_upsert => true
                                                script => "ctx._source.remove('awaitingCustomerApproval');ctx._source.awaitingCustomerApproval = 'false'"
                                                script_lang => "painless"
                                                script_type => "inline"
                                                cacert => "/usr/share/logstash/custom/certs/ca.crt"
                                                ssl => true
                                                user => "elastic"
                                                password => "Seamless@123"
                                                
                                                }
                                  elasticsearch {
                                                action => "create"
                                                hosts => [ "https://10.10.4.193:9200"]
                                                index => "data_lake_%{[@metadata][week_num]}"
                                                document_id => "%{ersReference}"
                                                cacert => "/usr/share/logstash/custom/certs/ca.crt"
                                                ssl => true
                                                user => "elastic"
                                                password => "Seamless@123"
                                                
                                                 }

                  }
        else if([operation] and [operation]=="REQUEST_REVERSAL" and [ReferredTransactionErsReference] and [ReferredTransactionErsReference] != "" and [resultMessage] and [resultMessage]=="SUCCESS") {
                                  elasticsearch {
                                        hosts => [ "https://10.10.4.193:9200"]
                                        index => "data_lake_%{[@metadata][week_num_referred]}"
                                        document_id => "%{ReferredTransactionErsReference}"
                                        action => "update"
                                        script => "ctx._source.isTransactionReversible = 'false'"
                                        script_lang => "painless"
                                        script_type => "inline"
                                        cacert => "/usr/share/logstash/custom/certs/ca.crt"
                                        ssl => true
                                        user => "elastic"
                                        password => "Seamless@123"
                                        

                                                }
                                  elasticsearch {
                                                action => "create"
                                                hosts => [ "https://10.10.4.193:9200"]
                                                index => "data_lake_%{[@metadata][week_num]}"
                                                document_id => "%{ersReference}"
                                                cacert => "/usr/share/logstash/custom/certs/ca.crt"
                                                ssl => true
                                                user => "elastic"
                                                password => "Seamless@123"
                                                
                                                 }
                              }

            else {             
                elasticsearch {
                action => "create"
                hosts => [ "https://10.10.4.193:9200"]
                index => "data_lake_%{[@metadata][week_num]}"
                document_id => "%{ersReference}"
                cacert => "/usr/share/logstash/custom/certs/ca.crt"
                ssl => true
                user => "elastic"
                password => "Seamless@123"
                

                              }
                }
  stdout { codec => rubydebug }
}
}
