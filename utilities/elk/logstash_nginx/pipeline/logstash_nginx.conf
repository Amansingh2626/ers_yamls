filter {
if [fields][logtype] == "nginxlog"{
  grok {
      match => { "message" => "(?<nginx_request>.*api_access_time.*/api/standard-link/gp/endPoint.*)"}
  }

  if "_grokparsefailure" in [tags]
  {
    drop { }
  }

  kv {
        source => "nginx_request"
        field_split => "|"
        value_split => "="
        allow_empty_values => true
        whitespace => strict
  }

mutate {
         copy => { "request_body" => "request_type" }
       }

grok   {
         match => [ "request_type", ">.*<TYPE>%{DATA:request_type}</TYPE>.*<" ]
         overwrite => [ "request_type" ]
       }


grok   {
         match => [ "upstream_addr", "(?<upstream_addr_ip>.*):(?<upstream_addr_port>.*)" ]
       }



if("ersReference" in [system-token])
{
grok   {
         match => { "system-token" =>  "ersReference\\.*?\":\\.*?\"%{DATA:ersReference}\\.*?" }
#        match => { "system-token" =>  "startTime\\.*?\":%{DATA:startTime}," }
       }
}
else
{
mutate {
         copy => { "api_request_id" => "ersReference" }
       }
}



mutate {
            split => ["request", " "]
            add_field => { "api_params" => "%{[request][1]}" }
            add_field => { "http_version" => "%{[request][2]}" }
       }
mutate {
            split => ["api_params", "?"]
            add_field => { "api_endpoint" => "%{[api_params][0]}" }
            add_field => { "gateway_params" => "%{[api_params][1]}"}
       }


 kv {
        source => "gateway_params"
        field_split => "&"
        value_split => "="
        allow_empty_values => true
        whitespace => strict
  }

if ![request_type]
     {
     mutate {
            copy => {"TYPE" => "request_type"}
            }
     }


  date {
      match => ["api_access_time", "ISO8601"]
      timezone => "UTC"
      target => "api_access_time"
  }


ruby {
      code => "
          require 'date'
#         t = event.get('api_access_time').time - 21600
          t = event.get('api_access_time').time
          week_n = t.strftime '%V'
          month_n = t.strftime '%m'
          year_n = t.strftime '%Y'
          if(week_n == '01' && month_n == '12')
            year_n = (year_n.to_i + 1)
            week_num = year_n.to_s + 'w' + week_n.to_s
          else if (month_n == '01' && week_n.to_i > 50)
            year_n = (year_n.to_i - 1)
            week_num = year_n.to_s + 'w' + week_n.to_s
          else
            week_num = year_n + 'w' + week_n
          end
          end
          event.set('[@metadata][week_num]', week_num)
      "
}



mutate {
convert => { "body_bytes_sent" => "integer" }
convert => { "bytes_sent" => "integer" }
convert => { "request_time" => "float" }
convert => { "status" => "integer" }
convert => { "upstream_connect_time" => "float" }
convert => { "upstream_header_time" => "float" }
convert => { "upstream_response_time" => "float" }
convert => { "upstream_status" => "integer" }
 }







prune
 {
   whitelist_names => [ "request_type","LOGIN","REQUEST_GATEWAY_CODE","body_bytes_sent","api_request_id","request_length","upstream_header_time","@timestamp","SERVICE_PORT","http_version","SOURCE_TYPE","upstream_response_time","api_access_time","REQUEST_GATEWAY_TYPE","status","upstream_connect_time","upstream_status","ersReference","bytes_sent","request_body","content_type","client","referer","fields","source_address","api_endpoint","request_time","upstream_addr","method","user_agent" ]
}



}
}


output {
if [fields][logtype] == "nginxlog"{

 elasticsearch {
                action => "create"
                hosts => [ "https://10.10.4.193:9200"]
                index => "nginx_lake_%{[@metadata][week_num]}"
                document_id => "%{ersReference}"
                cacert => "/usr/share/logstash/custom/certs/ca.crt"
                ssl => true
                user => "elastic"
                password => "Seamless@123"
            }

  stdout { codec => rubydebug }
}
}

