#Service Id's are the REST services exposed and to be used

serviceids=SimpleCreateAndActivate,Test,SimpleDeactivate,TestXML


#Below, You can provide url, i.e the methodName and other request/response parameters

#sample SimpleCreateAndActivate

service.SimpleCreateAndActivate.url=SimpleCreateAndActivate
service.SimpleCreateAndActivate.method=POST
service.SimpleCreateAndActivate.messageType=JSON
service.SimpleCreateAndActivate.response.default={"Message": "this is deafult response from SimpleCreateAndActivate."}
service.SimpleCreateAndActivate.request.header.1.key=Content-Type
service.SimpleCreateAndActivate.request.header.1.value=application/json;charset=UTF-8
service.SimpleCreateAndActivate.request.header.2.key=Authorization
service.SimpleCreateAndActivate.request.header.2.value=Basic U0VBTUxFU1M6M3F6ajY1a0w=

service.SimpleCreateAndActivate.response.header.1.key=Content-Type
service.SimpleCreateAndActivate.response.header.1.value=application/json;charset=UTF-8
service.SimpleCreateAndActivate.response.header.2.key=Authorization
service.SimpleCreateAndActivate.response.header.2.value=Basic U0VBTUxFU1M6M3F6ajY1a0w=

service.SimpleCreateAndActivate.request.1.header.1.key=Accept
service.SimpleCreateAndActivate.request.1.header.1.value=application/json;charset=UTF-8

service.SimpleCreateAndActivate.response.1.header.1.key=Authorization
service.SimpleCreateAndActivate.response.1.header.1.value=Basic U0VBTUxFU1M6M3F6ajY1a0w=
service.SimpleCreateAndActivate.response.1.header.2.key=Content-Type
service.SimpleCreateAndActivate.response.1.header.2.value=application/json;charset=UTF-8

service.SimpleCreateAndActivate.request.1.body={"productId":"[0-9]{4}", "countryCode":45, "price":299, "test":{"test1":123, "test2":"[0-9]{4}"}, "storeId":"DIST1", "packaging":7, "isTest":true, "productId1":"[0-9]{4}"}
service.SimpleCreateAndActivate.response.1.body={"productId":${productId}, "test2":${test.test2}, "GiftcardId": Faker::number().randomNumber(7,true)::Faker,"SecurityCode": "Faker::lorem().characters(6,true)::Faker"}
service.SimpleCreateAndActivate.request.2.body={"productId":1834,"countryCode":45,"price":299,"storeId":"DIST1","packaging":7,"isTest":true}
service.SimpleCreateAndActivate.response.2.body={"TEST":"test", "GiftcardId": Faker::number().randomNumber(7,true)::Faker,"SecurityCode": "Faker::lorem().characters(6,true)::Faker"}
service.SimpleCreateAndActivate.request.3.body={"GiftcardId":"[0-9]{4}", "Price":299, "StoreId":"Butik"}
service.SimpleCreateAndActivate.response.3.body={"GiftcardId": Faker::number().randomNumber(7,true)::Faker,"SecurityCode": "Faker::lorem().characters(6,true)::Faker"}
service.SimpleCreateAndActivate.request.4.body={"productId":"[0-9]{4}", "countryCode":45, "price":"[0-9]{1,3}", "storeId":"DIST1", "packaging":7, "isTest":true}
service.SimpleCreateAndActivate.response.4.body={"GiftcardId": Faker::number().randomNumber(6,true)::Faker,"SecurityCode": "Faker::lorem().characters(5,true)::Faker"}

#SimpleDeactivate

service.SimpleDeactivate.url=SimpleDeactivate
service.SimpleDeactivate.method=POST
service.SimpleDeactivate.messageType=JSON
service.SimpleDeactivate.response.default=This is default response for deactivate
service.SimpleDeactivate.request.header.1.key=Content-Type
service.SimpleDeactivate.request.header.1.value=application/json;charset=UTF-8
service.SimpleDeactivate.request.header.2.key=Authorization
service.SimpleDeactivate.request.header.2.value=Basic U0VBTUxFU1M6M3F6ajY1a0w=

service.SimpleDeactivate.response.header.1.key=Content-Type
service.SimpleDeactivate.response.header.1.value=application/xml;charset=UTF-8
service.SimpleDeactivate.response.header.2.key=Authorization
service.SimpleDeactivate.response.header.2.value=Basic U0VBTUxFU1M6M3F6ajY1a0w=



service.SimpleDeactivate.request.1.body={"giftCardId":"[0-9]{1,8}"}

service.SimpleDeactivate.response.1.body={}

service.Test.url=test
service.Test.method=GET
service.Test.response.header.1.key=Content-Type
service.Test.response.header.1.value=application/xml;charset=UTF-8
#If request are sending http param, now you can match any param with .param properties and accordingly you can return response.
#Note : you have to separate the param filed by comma(,) separator. You can use regex also.

#you have to write decoded values for = and , in param. ex: param=name=.*,password=(,abc=)   = = = > param=name=.*,password=(%2Cabc%3D)
#In above example we have added decoded values for ,(%2C) and =(%3D)

service.Test.request.1.param=name=[a-zA-Z0-9]{5},age=\\d{2}
service.Test.response.1.body=<?xml version="1.0" encoding="UTF-8" standalone="yes"?><fulfillmentService><responseCode>Request::age::Request</responseCode><status>Faker::lorem().characters(6,true)::Faker</status><systemType>Request::name::Request</systemType><responseDescription>Success.</responseDescription><requestId>WEB_10.66.52.60_d3713baf-77ce-4d70-97a0-e304e4fbdccb</requestId><responseData><responseType>PRODUCT</responseType><action>PRODUCT_BUY</action><inputCode>NACT_<CODE></inputCode><circleCode>CM</circleCode><productBuy><productId>297</productId><productName>BME test 3 Surf Month 15000</productName><productType>Data</productType><amtCharged>50</amtCharged><notification>Votre forfait Mobile Surf Mois 15000 a ete active avec succes: Souscription valable 30 jours. Pour verifier votre solde, tapez *157*99#</notification></productBuy></responseData></fulfillmentService>

#TestXML

service.TestXML.url=TestXML
service.TestXML.method=GET
service.TestXML.messageType=PLAINTEXT
service.TestXML.response.default=<response><status><code>400</code><message>Bad Request, This is default response for TestXML api</message></status></response>


service.TestXML.response.header.1.key=Content-Type
service.TestXML.response.header.1.value=application/xml;charset=UTF-8

service.TestXML.request.1.param=msisdn=233\\d{9},auth_key=U0VBTUxFU1M6M3F6ajY1a0w=
service.TestXML.response.1.body=<response><status><code>200</code><message>Success</message></status></response>
